#!/bin/bash

awk '
function clean(lbl)
{
  sub("%", "", lbl);
  sub(",", "", lbl);
  return "L_" nm "_" lbl;
}
BEGIN { print "digraph G {" }
$1 == "define" {
	for (i = 1; i <= NF; i++) {
	  if ($i ~ /^@/) {
	    f = i;
	    break;
	  }
	}
	nm = substr($f,2);
	sub("[(].*", "", nm);
	symtab[nm] = 1
	print "subgraph cluster_" nm " {\n label=\"" nm "\";";
	cur="entry_" nm;
	print cur "[style=filled fillcolor=\"yellow\"];";
}
$1 == "br" {
	if ($2 == "label") {
		print cur " -> " clean($3) ";";
	} else if ($2 == "i1") {
		print cur " -> " clean($5) ";";
		print cur " -> " clean($7) ";";
	}
}
$1 == "call" || $3 == "call" {
	# %28 = call i32 @abs(i32 %27) #8
	# call void @stbi__out_gif_code(%struct.stbi__gif* %222, i16 zeroext %224)
	# call void %222(i8* %225, i8* %25, i32 1)
	# %387 = call i8* %349(i8* %356, i8* %368, i8* %380, i32 %383, i32 %386)
	# %73 = call i32 (%struct.stbi__write_context*, i32, i32, i32, i32, i32, i32, i8*, i32, i32, i8*, ...) @stbiw__outfile(%struct.stbi__write_context* %58, i32 -1, i32 -1, i32 %59, i32 %60, i32 %61, i32 0, i8* %62, i32 %63, i32 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.136, i64 0, i64 0), i32 0, i32 0, i32 %64, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %65, i32 %66, i32 %70, i32 %72)

	sr = "FAILED_TO_FIND_SR"
	for (i = 1; i <= NF; i++) {
	  if ($i ~ /^@[^(]+[(].+/ ||
	      $i ~ /^%[0-9]+[(].+/ ) {
	    sr = $i;
	    break;
	  }
	}
	if (sr == "FAILED_TO_FIND_SR") {
	  print NR, sr "\n" $0 > "/dev/stderr"
	  exit
	}
	sub("[(].*", "", sr)
	if (sr ~ /^%/) {
	  sr = "FPDR_" substr(sr, 2)
	} else {
	  sr = substr(sr, 2)
	}
	# print "post % check", sr > "/dev/stderr"
	gsub(/\./, "_", sr);
	if (sr in symtab) {
	  #print cur " -> entry_" sr "[color=\"red\"];" > "/dev/stderr";
	  #print "exit_" sr " -> " cur "[color=\"blue\"];" > "/dev/stderr";
	  g = g cur " -> entry_" sr "[color=\"red\"];\nexit_" sr " -> " cur "[color=\"blue\"];\n"
	} else {
	  lsym = cur "_" sr
          if (!(lsym in lsymtab)) {
	    lsymtab[lsym] = 1
	    #print lsym "[label=\"" sr "\"];" > "/dev/stderr";
	    g = g lsym "[label=\"" sr "\"];\n"
	  }
	  #print cur " -> " lsym "[color=\"pink\",dir=both,minlen=0];" > "/dev/stderr";
	  g = g cur " -> " lsym "[color=\"pink\",dir=both,minlen=0];\n"
	  ##print lsym " -> " cur ";" > "/dev/stderr";
	}
}
$1 ~ ":$" {
	split($1, a, ":");
	cur = "L_" nm "_" a[1];
}
$1 == ";" && $2 ~ "label" {
	split($2, a, ":");
	cur = "L_" nm "_" a[2];
}
$1 == "switch" {
	for (i = 1; i <= NF; i++) {
	  if ($i == "label") {
	    f = i + 1;
	    break;
	  }
	}
	print cur " -> " clean($f) ";";
	while ((getline) > 0) {
	  if ($1 == "]") break;
	  for (i = 1; i <= NF; i++) {
	    if ($i == "label") {
	      f = i + 1;
	      break;
	    }
	  }
	  print cur " -> " clean($f) ";";
	}
}
$1 == "ret" {
	print cur " -> exit_" nm ";"
}
$1 == "}" { print $1 }
END	{ print g "}" }' $*
