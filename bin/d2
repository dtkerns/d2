#!/bin/bash

DOSAGE=$(dirname $(realpath $0))

if [ ! -f $DOSAGE/.config ]
then
  echo "please run 'make' in the $DOSAGE/src directory"
  exit 1
else
  source $DOSAGE/.config
  if [ "$NEWPASSMANAGER" == "implemented" ]
  then
    optflags="-passes='print<loops>' -disable-output"
    if [ $LLVMVER -lt 19 ]
    then
      echo "warning: due to a bug in LLVM versions < 19, you will need to add a -O1 (minimum) to CFLAGS in your makefiles"
    fi
  else
    optflags="-analyze --loops"
  fi
fi

usage() {
  echo "usage: $0 [-m] output_dir"
  echo "    -m  don't run make to generate .ll/.llg files"
  exit 1
}

domake=1
TEMP=$(getopt -o '?hm' -- "$@")
eval set -- "$TEMP"
unset TEMP
while true
do
  case "$1" in
    '-h'|'-?') usage ;;
    '-m') domake=0; shift; continue ;;
    '--') shift; break ;;
  esac
done

if [ $# -gt 0 -a -d "$1" ]
then
  OD=$(realpath $1) # output dir
else
  usage
fi

echo $DOSAGE
echo $OD
mkdir -p $OD || exit

if [ $domake = 1 ]
then
  time make clean
  time make ll=1
  time make ll=1 llg=1
fi

find . | grep '\.ll$' > $OD/loll
find . | grep '\.llg$' > $OD/lollg

echo copy files to $OD
sort $OD/loll $OD/lollg | cpio -pdum $OD
cd $OD

echo create ll2c db
time for i in $(cat $OD/lollg)
do
  echo "llg2cdb $i" >&2
  $DOSAGE/llg2cdb.py $i | sort -t_ -k1 -k3 -k2 -k4 -n
done > $OD/bbcdb

echo create loop files
time for i in $(cat $OD/loll)
do
  echo "opt $i $optflags > ${i%%ll}loop" >&2
  opt $i $optflags > ${i%%ll}loop
done

echo create dot files
time for i in $(cat $OD/loll)
do
  echo "ll2dot $i > ${i%%ll}dot" >&2
  $DOSAGE/ll2dot.py $i > ${i%%ll}dot
done

echo create sb files
pwd
time for i in $(cat $OD/loll)
do
  if [ ! -e ${i%%ll}const ]
  then
    echo "sb -c ${i%%ll}dot | sort -u > ${i%%ll}const" >&2
    $DOSAGE/sb -c ${i%%ll}dot | sort -u | grep -v '^sqrt$' > ${i%%ll}const
    test -s ${i%%ll}const && vim ${i%%ll}const
  fi
  echo "sb -f ${i%%ll}const ${i%%ll}dot > ${i%%ll}sb" >&2
  $DOSAGE/sb -f ${i%%ll}const ${i%%ll}dot > ${i%%ll}sb
  d=$(echo ${i%ll}db.d)
  f=$(basename ${i%%ll}sb)
  rm -rf $d
  mkdir $d
  (
   cd $d
   $DOSAGE/sep_g.py ../$f
  )
done

echo create bbdb
pwd
time for i in $(cat $OD/loll)
do
  echo "ll2db $i" >&2
  $DOSAGE/ll2db.py $i
done > $OD/bbdb

echo create loopdb
time for i in $(cat $OD/loll)
do
  echo "loop2db ${i%%ll}loop" >&2
  $DOSAGE/loop2db.py ${i%%ll}loop
done > $OD/loopdb

echo create bbsbdb
time for i in $(cat $OD/loll)
do
  echo "sb2db ${i%%ll}sb" >&2
  $DOSAGE/sb2db.py ${i%%ll}sb | sort -u
done > $OD/bbsbdb

ls -l $OD/{bbcdb,bbdb,loopdb,bbsbdb}
echo number bb $(cat $OD/bbdb | wc -l)
echo number bb in loops $(cat $OD/loopdb | wc -l)
echo rank SB
time $DOSAGE/filtbb.py $OD/loopdb $OD/bbsbdb $OD/bbdb | sort -r -t: -n -k3 -k4 > $OD/rankorder

echo separate ll into bb files
time $DOSAGE/ll2bb.py $(cat $OD/loll) > $OD/lobb
#echo create signature file for each bb file

echo create normalized file for each bb file
time for bb in $(cat $OD/lobb)
do
  #awk -f $DOSAGE/bb2sig $bb > ${bb}.sig
  $DOSAGE/bbnorm.py $bb > ${bb}.norm
done
echo rank order normalized files
#awk -F: '$3 > 0 && $4 > 0 && $5 != "" { dir = $1; file = $2; sub(".ll$", ".bb", dir); print dir "/" file ".sig"; }' $OD/rankorder > $OD/rosigfiles
time awk -F: '$3 >= 0 && $4 >= 0 && $5 != "" { dir = $1; file = $2; sub(".ll$", ".bb", dir); print dir "/" file ".norm"; }' $OD/rankorder > $OD/ronormfiles
#$DOSAGE/bbselect $OD/rosigfiles > bbsel_sig
echo bbselect
time $DOSAGE/bbselect.py $OD/ronormfiles > $OD/bbsel_norm
echo ID SB from BB
time awk '{f=$1;n=split(f,a,"/");sub("bb/"a[n],"ll",f);sub(".norm$","",a[n]);print f":"a[n]}' $OD/bbsel_norm | uniq > $OD/bbsel_norm.bb
fgrep -f $OD/bbsel_norm.bb $OD/rankorder > $OD/bbselected
awk -F: '{b=$1;sub("ll$","db.d/",b);n=split($NF,a,",");for(i in a){x=b "g" a[i] ".dot";if(!(x in ol)){print x;ol[x]=1l;}}}' $OD/bbselected > $OD/sbselected
echo colorize BB within SB CFG

e1='/^\( *\)exit.*style=invis/a'
e2='[color=red];'
time for bb in $(cut -d: -f2 $OD/bbselected)
do
  for sb in $(grep -l $bb $(cat $OD/sbselected))
  do
    echo sed -i -e "$e1 $bb $e2" $sb
    sed -i -e "$e1 $bb $e2" $sb
    echo $sb >> $OD/sbmarkup
  done
done
